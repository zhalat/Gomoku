pipeline {
    agent any

    options {
       timestamps()
       timeout(time: 2, unit: 'HOURS') // Increased timeout to 2 hours
    }

    parameters {
        booleanParam(name: 'RUN_UT', defaultValue: true, description: 'Run unit tests')
    }

    environment {
        PRJ = "${env.WORKSPACE}"
        DOCKER_IMAGE = 'ginar/android_qt6_img:latest'
    }

    stages {
        stage('Pull Docker Image') {
            steps {
                script {
                    // Check if the Docker image exists locally
                    def imageExists = sh(script: "docker images -q ${env.DOCKER_IMAGE}", returnStdout: true).trim()
                    if (imageExists == "") {
                        echo "Docker image ${env.DOCKER_IMAGE} not found locally. Pulling from Docker Hub..."
                        retry(2) { //try max 2x 
                            sh(script: "docker pull ${env.DOCKER_IMAGE}", returnStdout: true, returnStatus: false).eachLine { line ->
                                echo line
                            }
                        }
                        echo "Docker image ${env.DOCKER_IMAGE} successfully pulled."
                    } else {
                        echo "Docker image ${env.DOCKER_IMAGE} already exists locally. Skipping pull."
                    }

                    //Verify Docker Image
                    def imageVerify = sh(script: "docker images -q ${env.DOCKER_IMAGE}", returnStdout: true).trim()
                    if (imageVerify == "") {
                        error "Docker image ${env.DOCKER_IMAGE} not found after pull. Aborting."
                    } else {
                        echo "Docker image ${env.DOCKER_IMAGE} is available locally."
                    }
                }
            }
        }
        
        stage('Build') {
            stages {
                stage('Android') {
                    steps {
                        sh 'pwd'
                        sh 'ls -las'
                        // sh 'docker run -dt -v build_android'
                        // sh 'docker run -e DEFAULT_TOOLCHAIN_PATH=/usr/bin ${DOCKER_LABEL_COMMON} --label task=build_debug --rm --volume ${PRJ}:/gomoku_prj -w=/gomoku_prj/build_debug ${DOCKER_BUILDER_TAG_ID_IMG} make'
                        // zip zipFile: "gomoku_al_debug.zip", archive: true, dir: "${PRJ}/build_debug/src/", exclude: "*/CMakeFiles/*"
                    }
                }
            }
        }

        // Add further stages here as needed
    }
}
